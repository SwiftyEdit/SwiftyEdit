<?php

/**
 * SwiftyEdit - backend main file
 *
 * global variables
 * @var array $lang from language files
 * @var string $languagePack
 * @var string $lang_sign
 * @var array $icon from icons.php
 * @var array $se_prefs preferences
 *
 * from config
 * @var string $se_db_content filepath to sqlite file
 * @var string $se_db_user filepath to sqlite file
 * @var string $se_db_posts filepath to sqlite file
 * @var string $se_db_index filepath to sqlite file
 * @var string $img_path filepath to image/uploads directory
 * @var string $files_path filepath to files upload directory
 *
 * from versions.php
 * @var string $se_version_title SwiftyEdit version title
 * @var string $se_version_build build number
 *
 * from editors.php
 * @var string $tinyMCE_config_contents
 *
 * others
 * @var string $tn get parameter
 * @var string $sub
 * @var string $maininc
 *
 *
 */

session_start();
error_reporting(E_ALL ^E_NOTICE ^E_WARNING ^E_DEPRECATED);

require '../vendor/autoload.php';

use Medoo\Medoo;

require '../acp/core/icons.php';

require '../config.php';
if (is_file(SE_CONTENT . '/config.php')) {
    include SE_CONTENT . '/config.php';
}
if (is_file(SE_CONTENT . '/config_smtp.php')) {
    include SE_CONTENT . '/config_smtp.php';
}

$version_file = file_get_contents(SE_ROOT.'version.json');
$se_version = json_decode($version_file, true);

/**
 * if we use MySQL there is an autogenerated file config_database.php
 * variables from this file
 * @var string $database_name
 * @var string $database_host
 * @var string $database_user
 * @var string $database_psw
 * @var string $database_port
 */

if (is_file('../config_database.php')) {
    include '../config_database.php';
    $db_type = 'mysql';

    $database = new Medoo([
        'type' => 'mysql',
        'database' => "$database_name",
        'host' => "$database_host",
        'username' => "$database_user",
        'password' => "$database_psw",
        'charset' => 'utf8',
        'port' => $database_port,
        'prefix' => DB_PREFIX
    ]);

    $db_content = $database;
    $db_user = $database;
    $db_posts = $database;


} else {
    $db_type = 'sqlite';


    define("CONTENT_DB", "$se_db_content");
    define("USER_DB", "$se_db_user");
    define("POSTS_DB", "$se_db_posts");

    $db_content = new Medoo([
        'type' => 'sqlite',
        'database' => CONTENT_DB
    ]);

    $db_user = new Medoo([
        'type' => 'sqlite',
        'database' => USER_DB
    ]);

    $db_posts = new Medoo([
        'type' => 'sqlite',
        'database' => POSTS_DB
    ]);

}

define("INDEX_DB", "$se_db_index");
define("IMAGES_FOLDER", "$img_path");
define("FILES_FOLDER", "$files_path");
const SE_SECTION = "backend";


$db_index = new Medoo([
    'type' => 'sqlite',
    'database' => INDEX_DB
]);


require '../acp/core/access.php';


if (!isset($_SESSION['editor_class'])) {
    $_SESSION['editor_class'] = "wysiwyg";
}

/* switch editor - plain text or wysiwyg */
if (isset($_GET['editor'])) {

    if ($_GET['editor'] == 'wysiwyg') {
        $_SESSION['editor_class'] = "wysiwyg";
    } elseif ($_GET['editor'] == 'plain') {
        $_SESSION['editor_class'] = "plain";
    } else {
        $_SESSION['editor_class'] = "code";
    }

}

if ($_SESSION['editor_class'] == "wysiwyg") {
    $editor_class = "mceEditor";
    $editor_small_class = "mceEditor_small";
} elseif ($_SESSION['editor_class'] == "plain") {
    $editor_class = "plain";
    $editor_small_class = "plain";
} else {
    $editor_class = "aceEditor_html";
    $editor_small_class = "aceEditor_html";
}


require '../acp/core/functions.php';
require '../core/functions/functions.php';

if(isset($_GET['query'])) {
    $query = se_clean_query($_GET['query']);
}
if(!isset($query)) {
    $query = '/admin/';
}
$se_path = explode("/", $query);

require '../acp/core/switch.php';


$all_mods = se_get_all_addons();
$cnt_mods = count($all_mods);
$all_plugins = se_get_all_addons();
$se_labels = se_get_labels();
$cnt_labels = count($se_labels);
$all_langs = get_all_languages();
$all_hooks = se_get_all_hooks();

/**
 * read the preferences
 * OLD: do not use the old $prefs_default_language
 * NEW: use $se_prefs['default_language']
 */

$se_get_preferences = se_get_preferences();

foreach ($se_get_preferences as $k => $v) {
    $key = $se_get_preferences[$k]['option_key'];
    $value = $se_get_preferences[$k]['option_value'];

    /* $se_prefs['prefs_pagetitle'] */
    $se_prefs[$key] = $value;

    /* without the 'prefs_' prefix $se_prefs['pagetitle'] */
    if(substr($key,0,6) == 'prefs_') {
        $short_key = substr($key,6);
        $se_prefs[$short_key] = $value; // old
        $se_settings[$short_key] = $value; // new
    }
}

if ($se_prefs['prefs_timezone'] != '') {
    date_default_timezone_set($se_prefs['prefs_timezone']);
}

/* set language */

if (!isset($_SESSION['lang'])) {
    if ($se_prefs['prefs_default_language'] != '') {
        $_SESSION['lang'] = $se_prefs['prefs_default_language'];
    } else {
        $_SESSION['lang'] = $languagePack;
    }
}

if (isset($_GET['set_lang'])) {
    $set_lang = sanitizeUserInputs($_GET['set_lang']);
    if (is_dir("../public/assets/lang/$set_lang/")) {
        $_SESSION['lang'] = "$set_lang";
    }
}

if (isset($_SESSION['lang'])) {
    $languagePack = basename($_SESSION['lang']);
}

require SE_ROOT.'/languages/index.php';


/**
 * $default_lang_code (string) the default language code
 */

if ($se_prefs['prefs_default_language'] != '') {
    include SE_ROOT.'/languages/' . $se_prefs['prefs_default_language'] . '/index.php';
    $default_lang_code = $lang_sign; // de|en|es ...
}

/**
 * $lang_codes (array) all available lang codes
 * hide languages from $prefs_deactivated_languages
 * all active languages are stored in $active_lang
 */
if (isset($se_prefs['prefs_deactivated_languages']) AND $se_prefs['prefs_deactivated_languages'] != '') {
    $arr_lang_deactivated = json_decode($se_prefs['prefs_deactivated_languages']);
}

foreach ($all_langs as $l) {
    if (isset($arr_lang_deactivated) && (in_array($l['lang_folder'], $arr_lang_deactivated))) {
        continue;
    }

    $langs[] = $l['lang_sign'];
}

$lang_codes = array_values(array_unique($langs));

foreach($lang_codes as $l) {

    $lang_file = SE_ROOT.'/languages/' . $l . '/index.php';

    if(is_file($lang_file)) {
        include $lang_file;
        $active_lang[$l]['sign'] = $lang_sign;
        $active_lang[$l]['name'] = $lang_desc;
        $real_img_src = SE_ROOT.'/languages/' . $l . '/flag.png';
        $encoded_flag = base64_encode(file_get_contents($real_img_src));
        $active_lang[$l]['flag'] = 'data:image/png;base64,'.$encoded_flag;
    }
}

/* build absolute URL */
if ($se_prefs['prefs_cms_ssl_domain'] != '') {
    $se_base_url = $se_prefs['prefs_cms_ssl_domain'] . $se_prefs['prefs_cms_base'];
} else {
    $se_base_url = $se_prefs['prefs_cms_domain'] . $se_prefs['prefs_cms_base'];
}

if (!isset($_COOKIE['acptheme'])) {
    setcookie("acptheme", "dark_mono", time() + (3600 * 24 * 365));
}

if (isset($_GET['theme']) && ($_GET['theme'] == 'light_mono')) {
    setcookie("acptheme", 'light_mono', time() + (3600 * 24 * 365));
    $set_acptheme = 'light_mono';
}

if (isset($_GET['theme']) && ($_GET['theme'] == 'dark_mono')) {
    setcookie("acptheme", 'dark_mono', time() + (3600 * 24 * 365));
    $set_acptheme = 'dark_mono';
}


if (isset($set_acptheme)) {
    $acptheme = $set_acptheme;
} else {
    $acptheme = $_COOKIE["acptheme"];
}


?>
<!DOCTYPE html>
<html lang="<?php echo $languagePack; ?>" data-bs-theme="auto">
<head>
    <meta charset="utf-8">
    <title>ACP | <?php echo $se_base_url . ' | ' . $tn; ?></title>

    <link rel="icon" type="image/x-icon" href="images/favicon.ico"/>

    <link rel="stylesheet" href="/themes/administration/dist/backend.css?v=2024-06-25" type="text/css" media="screen, projection">

    <script type="text/javascript">
        const languagePack = "<?php echo $languagePack; ?>";
        let ace_theme;
        let tinymce_skin;
        ace_theme = 'chrome';
        tinymce_skin = 'oxide';

        const storedTheme = localStorage.getItem('backendTheme');

        if (storedTheme === 'dark') {
            ace_theme = 'twilight';
            tinymce_skin = 'oxide-dark';
        }
    </script>

    <script src="/themes/administration/dist/backend.js?v=2024-06-25"></script>
    <script src="/themes/administration/dist/tinymce/tinymce.min.js"></script>
    <script src="/themes/administration/dist/tinymce-jquery/tinymce-jquery.js"></script>


    <?php
    include '../acp/core/templates.php';
    ?>

</head>
<body>




<div id="page-content">

    <?php
    if (is_file('../maintenance.html')) {
        echo '<div class="alert alert-danger rounded-0 m-0">';
        echo $lang['update_msg_modus_activated'];
        echo '</div>';
    }
    ?>



    <?php
    $page_header_class = 'ph-dashboard';
    if($se_section != '') {
        $page_header_class = 'ph-'.$se_section;
    }
    echo '<div class="'.$page_header_class.' page-header">';
    require '../acp/core/nav_top_filter.php';
    require '../acp/core/nav_top.php';
    echo '</div>';
    ?>



    <div id="container">
        <?php include '../acp/core/' . $maininc; ?>
    </div>

    <div id="page-sidebar">
        <div id="page-sidebar-inner">
            <?php include '../acp/core/nav_sidebar.php'; ?>
        </div>
    </div>

    <?php include '../acp/core/editors.php'; ?>

    <div id="footer">
        <p class="text-center">
            <?php
            foreach($active_lang as $k => $v) {
                $lang_icon = '<img src="' . $v['flag'] . '" style="vertical-align: baseline; width:18px; height:auto;">';
                echo '<a class="btn btn-sm btn-default" href="/admin/?set_lang=' . $v['sign'] . '">' . $lang_icon . ' ' . $v['name'] . '</a> ';
            }
            ?>
        </p>
        <hr>
        <p>
            <img src="/themes/administration/images/swiftyedit_icon.svg" alt="se-logo" width="60px"><br>
            <b>SwiftyEdit</b><br>
            copyright © <?php echo date('Y'); ?>, <a href="https://swiftyedit.com/" target="_blank">SwiftyEdit.com</a>
        </p>
        <p class="d-none"><?php echo microtime(true) - $_SERVER['REQUEST_TIME_FLOAT']; ?></p>
    </div>

</div>

<div class="bottom-bar">
    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal"
            data-bs-target="#uploadModal"><?php echo $icon['upload']; ?> Upload
    </button>
</div>

<div class="modal fade" id="uploadModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel"><?php echo $icon['upload']; ?> Upload</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="dropper" action="/admin/upload/" method="POST">
                    <!--
                    <input type="file" />
                    <button type="submit">Upload</button>
                    -->

                    <?php

                    $path_img = IMAGES_FOLDER;
                    $img_dirs = se_get_dirs_rec($path_img);

                    $path_files = FILES_FOLDER;
                    $files_dirs = se_get_dirs_rec($path_files);

                    $img_folder = basename($path_img);
                    $files_folder = basename($path_files);
                    ?>

                    <div class="row">
                        <div class="col-md-9">
                            <label><?php echo $lang['upload_destination']; ?></label>
                            <select name="upload_destination" class="form-control custom-select">
                                <optgroup label="<?php echo $lang['images']; ?>">
                                    <option value="<?php echo $path_img; ?>"><?php echo $img_folder; ?></option>
                                    <?php
                                    foreach($img_dirs as $d) {
                                        $short_d = str_replace($path_img, '', $d);
                                        echo '<option value="'.$d.'">'.$img_folder.$short_d.'</option>';
                                    }
                                    ?>
                                </optgroup>
                                <optgroup label="<?php echo $lang['files']; ?>">
                                    <option value="<?php echo $path_files; ?>"><?php echo $files_folder; ?></option>
                                    <?php
                                    foreach($files_dirs as $d) {
                                        $short_d = str_replace($path_files, '', $d);
                                        echo '<option value="'.$d.'">'.$files_folder.$short_d.'</option>';
                                    }
                                    ?>
                                </optgroup>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="file_mode" value="overwrite" id="overwrite">
                                <label class="form-check-label" for="overwrite">
                                    <?php echo $lang['upload_overwrite_existing_files']; ?>
                                </label>
                            </div>
                        </div>
                    </div>

                    <input type="hidden" name="w" value="<?php echo $se_settings['maximagewidth']; ?>" />
                    <input type="hidden" name="w_tmb" value="<?php echo $se_settings['maxtmbwidth']; ?>" />
                    <input type="hidden" name="h" value="<?php echo $se_settings['maximageheight']; ?>" />
                    <input type="hidden" name="h_tmb" value="<?php echo $se_settings['maxtmbheight']; ?>" />
                    <input type="hidden" name="fz" value="<?php echo $se_settings['maxfilesize']; ?>" />
                    <input type="hidden" name="unchanged" value="<?php echo $se_settings['uploads_remain_unchanged']; ?>" />
                    <input type="hidden" name="csrf_token" value="<?php echo $_SESSION['token']; ?>">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- modal for documentation -->
<div id="helpModal" class="modal fade"
     style="display: none"
     aria-hidden="true" tabindex="-1">
    <div class="modal-dialog" role="document">
        <div class="modal-content"></div>
    </div>
</div>

<!-- modal for page infos -->
<div id="infoModal" class="modal fade"
     style="display: none"
     aria-hidden="true" tabindex="-1">
    <div class="modal-dialog" role="document">
        <div class="modal-content"></div>
    </div>
</div>


<script type="text/javascript">

    $(function () {

        /* toggle editor class [mceEditor|plain|aceEditor_html] */
        var editor_mode = localStorage.getItem('editor_mode');
        if (!editor_mode) {
            editor_mode = 'optE1';
            localStorage.setItem("editor_mode", editor_mode);
        }

        $('input[name="optEditor"]').on("change", function () {
            var button = $("input[name='optEditor']:checked").val();
            localStorage.setItem("editor_mode", button);
            switchEditorMode(button);
        });

        if (editor_mode !== 'optE1') {
            switchEditorMode(editor_mode);
        } else {
            <?php echo $tinyMCE_config_contents; ?>
        }

        //setAceEditor();

        $("input[value=" + editor_mode + "]").parent().addClass('active');

        function switchEditorMode(mode) {

            var textEditor = $('textarea[class*=switchEditor]');
            textEditor.removeClass();
            textEditor.removeAttr('style');
            var divEditor = $('.aceCodeEditor');

            if (mode == 'optE1') {
                /* switch to wysiwyg */
                textEditor.addClass('mceEditor form-control switchEditor');
                textEditor.css("display", "flex");
                divEditor.remove();
                /* load configs again */
                <?php echo $tinyMCE_config_contents; ?>
                tinymce.EditorManager.execCommand('mceAddEditor', false, '#textEditor');
            }
            if (mode == 'optE2') {
                /* switch to plain textarea */
                if (tinymce.get().length > 0) {
                    tinymce.EditorManager.execCommand('mceRemoveEditor', true, '#textEditor');
                    $('div.mceEditor').remove();
                    tinymce.remove('.switchEditor');
                    tinymce.remove();
                }
                divEditor.remove();
                textEditor.addClass('plain form-control switchEditor');
                textEditor.css("visibility", "visible");
                textEditor.css("display", "flex");
            }
            if (mode == 'optE3') {
                /* switch to ace editor */
                if (tinymce.get().length > 0) {
                    tinymce.EditorManager.execCommand('mceRemoveEditor', true, '#textEditor');
                    $('div.mceEditor').remove();
                    tinymce.remove();
                }
                textEditor.addClass('aceEditor_code form-control switchEditor');
                setAceEditor();
            }

            $("input[name='optEditor']").parent().removeClass('active');
            $("input[value=" + mode + "]").parent().addClass('active');

        }

        function setAceEditor() {
            if ($('.aceEditor_code').length != 0) {
                $('textarea[class*=switchEditor]').each(function () {

                    var textarea = $(this);
                    var textarea_id = textarea.attr('id');
                    var editDiv = $('<div>', {
                        position: 'absolute',
                        'class': textarea.attr('class') + ' aceCodeEditor'
                    }).insertBefore(textarea);

                    var HTMLtextarea = $('textarea[class*=aceEditor_code]').hide();
                    var aceEditor = ace.edit(editDiv[0]);
                    aceEditor.$blockScrolling = Infinity;
                    aceEditor.getSession().setMode('ace/mode/html');
                    aceEditor.getSession().setValue(textarea.val());
                    aceEditor.setTheme('ace/theme/'+ace_theme);
                    aceEditor.getSession().setUseWorker(false);
                    aceEditor.setShowPrintMargin(false);

                    aceEditor.getSession().on('change', function () {
                        textarea.val(aceEditor.getSession().getValue());
                    });

                });
            }
        }


    });


    <?php
    $gc_maxlifetime = ini_get("session.gc_maxlifetime");
    if ($se_prefs['prefs_acp_session_lifetime'] > $gc_maxlifetime) {
        $maxlifetime = $se_prefs['prefs_acp_session_lifetime'];
    } else {
        $maxlifetime = $gc_maxlifetime;
    }

    if (isset($_COOKIE['identifier'])) {
        echo "var auto_logout = false;";
    } else {
        echo "var auto_logout = true;";
    }
    echo "var maxlifetime = '{$maxlifetime}';";
    ?>
    var countdown = {
        startInterval: function () {
            var currentId = setInterval(function () {
                $('#currentSeconds').html(maxlifetime);

                if (maxlifetime == 60) {
                    $('#expireDiv').removeClass('expire-hidden');
                    $('#expireDiv').addClass('expire-start');
                }
                if (maxlifetime == 30) {
                    $('#expireDiv').addClass('expire-soon');
                }
                if (maxlifetime == 15) {
                    $('#expireDiv').addClass('expire-danger');
                }
                if (maxlifetime < 0) {
                    window.location.href = "/index.php?goto=logout";
                }
                --maxlifetime;
            }, 1000);
            countdown.intervalId = currentId;
        }
    };
    if (auto_logout !== false) {
        countdown.startInterval();
    }

</script>

</body>
</html>